@page "/"

<MudPaper Elevation="4" Class="pa-4">

	<MudText Typo="MudBlazor.Typo.h4" Align="MudBlazor.Align.Center">Consultar por Cidade</MudText>

	<EditForm Model="@this" OnValidSubmit="HandleValidSubmit">


		<MudItem xs="12" sm="12" md="3" lg="3">
			<MudTextField T="string"
						  Label="Nome da Cidade"
						  @bind-Value="cidade.Nome" />
		</MudItem>

		<MudItem xs="12" sm="12" md="3" lg="3">

		</MudItem>

	</EditForm>


   @if (cidade != null)
{
	<p>Cidade Adicionada: @cidade.Nome</p>
}

</MudPaper>


@code{

	private string nomeDaCidade = "31";

	public Cidade cidade = new Cidade("Nome Padrão");

	public void AdicionarCidade(Cidade cidade)
	{
		
	}

	// Este método é chamado ao submeter o formulário
	void HandleValidSubmit()
	{
		Console.WriteLine($"Formulário enviado com sucesso! {cidade.Nome}");
	}

	// Este método cria a cidade com base no nome da cidade inserido
	public async void ConsultarPorCidade()
	{
		if (!string.IsNullOrEmpty(nomeDaCidade))
		{
			cidade = new Cidade(nomeDaCidade);
		}
		else
		{
			//se o nome da cidade for vazio ou nulo, exibe uma mensagem de erro.
			Console.WriteLine("Nome da cidade não pode ser vazio.");
		}

		using (HttpClient client = new HttpClient())
		{

			string keyAPI = "ea20d5b8700db72131450c6ec7313a37";
			string url = $"http://api.openweathermap.org/data/2.5/weather?q={cidade.Nome}&appid={keyAPI}&units=metric&lang=pt_br";

			try
			{
				var resposta = await client.GetFromJsonAsync<WeatherResponse>(url);

				if(resposta != null)
				{
					Console.WriteLine($" Temperatura: {resposta.Main.Temp} Humidade: {resposta.Main.Humidity}");
				}
			}catch (Exception ex)
			{
				Console.WriteLine(ex.Message);
			}


	    }
    }
}